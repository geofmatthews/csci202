\documentclass{article}
\usepackage[margin=1in]{geometry}
\usepackage{graphicx,hyperref,fancyvrb}
\title{CSCI 202, Spring 2017, Lab \# 5}
\author{Geoffrey Matthews}

\begin{document}
\maketitle

\begin{description}

\item[Due date:] Midnight, Monday, May 15.

\item[Goals:] Learn about Javascript loops and arrays, and the DOM.

  

\item[Zip your folder:]
  Put all your files (including the supporting files) in a single
  folder and  make a compressed (zip) archive of the folder.

\item[Files to turn in:]\mbox{}
  \begin{itemize}
\item The {\tt images} folder, and the HTML, CSS, and Javascript
  files, {\tt penguins.html}, {\tt penguins.css}, and {\tt penguins.js}.
  \item
    The {\tt images} folder, the HTML file {\tt penguins.html}, and
    the CSS file, {\tt penguins.css} are NOT TO BE CHANGED from the
    ones supplied on the git repository.
  \item
    You will create a javascript file, {\tt penguins.js}, that will do
    all of the creation and styling of the penguins (and the yeti).
  \end{itemize}

\item[Lab steps:]\mbox{}
  \begin{itemize}
  \item This lab will be a continuation of the previous lab.  The idea
    is to make a {\em lot} of penguins (and one yeti), but with much
    less work.  This version will support any number of penguins, and
    will place the one yeti in a random position, different every time
    the page is loaded.
  \item Examine the {\tt penguins.html} and {\tt penguins.css} files.
    You'll notice there's very little in them.
  \item Notice that the width of this version the full page, so we can have 
    many more    penguins in a row.  We also had to fix the styling of
    the title image.
  \item Notice that there are {\em no} penguins (or the yeti) in the
    HTML file, and {\em no} styling of the penguins (or the yeti) in
    the CSS file.  Javascript will do everything.
  \item Your Javascript file will declare and initialize the following
    variables at the top:
    \begin{Verbatim}[frame=single]
var penguinVisited = [];
var yetiVisited = false;
var numPenguins = 18;
var moundImages = ['url("images/mound_1.png")', ...]
var hoverImages = ['url("images/mound_1_hover.png")', ...]
var penguinImages = ['url("images/penguin_1.png")', ...]
\end{Verbatim}
    \item
    It will also set the {\tt window.onload} function to {\tt loadPenguins}.    
  \item You will also define the following functions:
    \begin{Verbatim}[frame=single]
function loadPenguins()
function penguinOver()
function penguinOut()
function penguinClick()
function yetiOver()
function yetiOut() 
function yetiClick() 
\end{Verbatim}      
    \item The {\tt loadPenguins} function (which also loads the yeti),
      will be the most substantial. It has the following tasks:
      \begin{enumerate}
      \item Find the {\tt gameholder} element of the web page.
      \item Pick a random number between 0 and {\tt numPenguins} -1.
      \item In a {\tt for} loop, it will
        create each penguin object.  If the loop index matches the random
        number, it will create a yet instead.
      \item For each penguin (or yeti), do the following:
        \begin{enumerate}
        \item Set its {\tt visited} state to {\tt false}.  (Use the
          appropriate variable or array.)
        \item Create a {\tt div} element.
        \item Set the  appropriate {\tt mouseover}, {\tt mouseout}
          and {\tt click} functions.
        \item Set the background image.
        \item Set the {\tt width}, {\tt height}, and {\tt float} style
          properties.
        \item Append the penguin (or the yeti) to the {\tt gameholder}
          element.
        \item If it's a penguin (not a yeti), set a {\tt num}
          property of the penguin object to {\tt i}, the {\tt for}
          loop variable.  This will give each penguin a unique number.
        \end{enumerate}
      \end{enumerate}

    \item The remaining six Javascript functions should be obvious,
      their functions similar to those from the previous lab.
      \begin{enumerate}
        \item
      The function will find the number of the penguin from the {\tt
        this.num} property of the penguin.
    \item
      Note: the yeti doesn't have a
      number. It's code is pretty much the same as the last lab.
    \item
      The function will check the boolean value for {\tt this.num}
in the {\tt visited} array      to see if it has been 
visited yet.
\item
  The {\tt click} methods will set the {\tt
        visited} array value to {\tt true}.
\item 
      For changing images we need to do a bit more work, since there
      are more penguins than images.
      
  We can then use {\tt this.num} to set the background image of the
  penguin as follows.  We have to pick a different image from the
  eight provided images for each penguin.  If we have more than eight
  penguins (which we do), we will have to recycle the numbers.  We do
  this with {\tt this.num}, and using \verb|(this.num % 8)| to index
  the arrays.  This number will always be in the range $0\ldots 7$ and
  so will always be a valid image from the array.
\item
  The {\tt over} methods should also set the cursor style to
  {\tt pointer}.
      \end{enumerate}
  \end{itemize}
  


\item[Acknowledgements:] Supporting files and ideas for this lab came
  from\\ \url{https://googlecreativelab.github.io/coder-projects/}


\end{description}

\end{document}
